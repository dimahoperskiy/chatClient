{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dimitry/Desktop/dev/saturnClient/src/components/content/Messages/MessagesContainer.js\";\nimport React from \"react\";\nimport Messages from \"./Messages\";\nimport { setRecipient, updateMessages, setDialogs, setIsConnected, setMessages, setIsDialogActive, messagesInitialThunk, setRecipientThunk } from \"../../../redux/reducers/messagesReducer\";\nimport { setCurrentUser } from \"../../../redux/reducers/authReducer\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { Redirect } from \"react-router\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport { compose } from \"redux\";\n\nconst mapStateToProps = state => {\n  return {\n    dialogs: state.messagesPage.dialogs,\n    messages: state.messagesPage.messages,\n    userId: state.auth.id,\n    login: state.auth.login,\n    recipient: state.messagesPage.recipient,\n    isConnected: state.messagesPage.isConnected,\n    isDialogActive: state.messagesPage.isDialogActive,\n    isLoggedIn: state.auth.isLoggedIn,\n    isLoading: state.messagesPage.isLoading,\n    isUserNotFound: state.messagesPage.isUserNotFound\n  };\n};\n\nconst mapDispatchToProps = {\n  setRecipient,\n  updateMessages,\n  setDialogs,\n  setIsConnected,\n  setMessages,\n  setCurrentUser,\n  setIsDialogActive,\n  messagesInitialThunk,\n  setRecipientThunk\n};\n\nclass MessagesContainer extends React.Component {\n  componentDidMount() {\n    this.props.messagesInitialThunk(this.props.match.params.recipient, this.props.userId, this.props.login);\n  }\n\n  render() {\n    if (this.props.isLoading) {\n      return /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 20\n      }, this);\n    } else if (this.props.isUserNotFound) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/404\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 20\n      }, this);\n    } else if (!this.props.isLoggedIn) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Messages, {\n        dialogs: this.props.dialogs,\n        messages: this.props.messages,\n        login: this.props.login,\n        recipient: this.props.recipient,\n        userId: this.props.userId,\n        setRecipient: this.props.setRecipientThunk,\n        isDialogActive: this.props.isDialogActive,\n        deleteMessage: this.props.deleteMessage,\n        sendMessage: this.props.sendMessage,\n        editMessage: this.props.editMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n}\n\nexport default compose(withRouter, connect(mapStateToProps, mapDispatchToProps))(MessagesContainer);","map":{"version":3,"sources":["/Users/dimitry/Desktop/dev/saturnClient/src/components/content/Messages/MessagesContainer.js"],"names":["React","Messages","setRecipient","updateMessages","setDialogs","setIsConnected","setMessages","setIsDialogActive","messagesInitialThunk","setRecipientThunk","setCurrentUser","connect","withRouter","Redirect","Preloader","compose","mapStateToProps","state","dialogs","messagesPage","messages","userId","auth","id","login","recipient","isConnected","isDialogActive","isLoggedIn","isLoading","isUserNotFound","mapDispatchToProps","MessagesContainer","Component","componentDidMount","props","match","params","render","deleteMessage","sendMessage","editMessage"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Messages from \"./Messages\";\nimport {\n    setRecipient,\n    updateMessages,\n    setDialogs,\n    setIsConnected,\n    setMessages,\n    setIsDialogActive,\n    messagesInitialThunk,\n    setRecipientThunk\n} from \"../../../redux/reducers/messagesReducer\";\nimport {setCurrentUser} from \"../../../redux/reducers/authReducer\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router-dom\";\nimport {Redirect} from \"react-router\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport {compose} from \"redux\";\n\nconst mapStateToProps = (state) => {\n    return ({\n        dialogs: state.messagesPage.dialogs,\n        messages: state.messagesPage.messages,\n        userId: state.auth.id,\n        login: state.auth.login,\n        recipient: state.messagesPage.recipient,\n        isConnected: state.messagesPage.isConnected,\n        isDialogActive: state.messagesPage.isDialogActive,\n        isLoggedIn: state.auth.isLoggedIn,\n        isLoading: state.messagesPage.isLoading,\n        isUserNotFound: state.messagesPage.isUserNotFound\n    })\n}\n\nconst mapDispatchToProps = {\n    setRecipient,\n    updateMessages,\n    setDialogs,\n    setIsConnected,\n    setMessages,\n    setCurrentUser,\n    setIsDialogActive,\n    messagesInitialThunk,\n    setRecipientThunk\n}\n\nclass MessagesContainer extends React.Component {\n    componentDidMount() {\n        this.props.messagesInitialThunk(this.props.match.params.recipient, this.props.userId, this.props.login)\n    }\n\n    render() {\n        if (this.props.isLoading) {\n            return <Preloader/>\n        } else if (this.props.isUserNotFound) {\n            return <Redirect to=\"/404\"/>\n        } else if (!this.props.isLoggedIn) {\n            return <Redirect to=\"/login\"/>\n        } else {\n            return <Messages dialogs={this.props.dialogs}\n                             messages={this.props.messages}\n                             login={this.props.login}\n                             recipient={this.props.recipient}\n                             userId={this.props.userId}\n                             setRecipient={this.props.setRecipientThunk}\n                             isDialogActive={this.props.isDialogActive}\n                             deleteMessage={this.props.deleteMessage}\n                             sendMessage={this.props.sendMessage}\n                             editMessage={this.props.editMessage}/>\n        }\n    }\n}\n\nexport default compose(\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps)\n)(MessagesContainer)"]},"metadata":{},"sourceType":"module"}