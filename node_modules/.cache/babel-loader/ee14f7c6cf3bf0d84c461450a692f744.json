{"ast":null,"code":"import api from \"../../api/api\";\nimport { setCurrentUser } from \"./authReducer\";\nconst SET_RECIPIENT = \"SET_RECIPIENT\";\nconst UPDATE_MESSAGES = \"UPDATE_MESSAGES\";\nconst SET_DIALOGS = \"SET_DIALOGS\";\nconst SET_IS_CONNECTED = \"SET_IS_CONNECTED\";\nconst SET_MESSAGES = \"SET_MESSAGES\";\nconst SET_IS_DIALOG_ACTIVE = \"SET_IS_DIALOG_ACTIVE\";\nconst SET_IS_USER_NOT_FOUND = \"SET_IS_USER_NOT_FOUND\";\nconst SET_IS_LOADING = \"SET_IS_LOADING\";\nlet initialState = {\n  dialogs: [],\n  recipient: '',\n  messages: [],\n  stomp: '',\n  isConnected: false,\n  isDialogActive: false,\n  isUserNotFound: true,\n  isLoading: true\n};\n\nconst messagesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_RECIPIENT:\n      return { ...state,\n        recipient: action.recipient\n      };\n\n    case SET_DIALOGS:\n      return { ...state,\n        dialogs: action.dialogs\n      };\n\n    case UPDATE_MESSAGES:\n      return { ...state,\n        messages: [...state.messages, action.message]\n      };\n\n    case SET_MESSAGES:\n      return { ...state,\n        messages: [...action.messages]\n      };\n\n    case SET_IS_CONNECTED:\n      return { ...state,\n        isConnected: action.isConnected\n      };\n\n    case SET_IS_DIALOG_ACTIVE:\n      return { ...state,\n        isDialogActive: action.isDialogActive\n      };\n\n    case SET_IS_USER_NOT_FOUND:\n      return { ...state,\n        isUserNotFound: action.isUserNotFound\n      };\n\n    case SET_IS_LOADING:\n      return { ...state,\n        isLoading: action.isLoading\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const messagesInitialThunk = (recipient, userId, login) => {\n  return dispatch => {\n    if (recipient === undefined) {\n      dispatch(setIsDialogActive(false));\n      dispatch(setMessages([]));\n    } else {\n      dispatch(setIsDialogActive(true));\n    }\n\n    api.getProfile().then(data1 => {\n      dispatch(setCurrentUser(data1.login, data1.email, data1.id));\n      api.getAllUsers().then(data2 => {\n        let resp = data2.content.filter(el => {\n          if (el.login === recipient) {\n            let id = el.id;\n            api.getChatMessages(id, userId).then(data3 => {\n              dispatch(setMessages(data3));\n            });\n          }\n\n          return el.login !== login;\n        });\n\n        if (recipient !== undefined) {\n          resp.map(el => {\n            if (recipient === el.login && recipient !== login) {\n              dispatch(setIsUserNotFound(false));\n            }\n          });\n        } else {\n          dispatch(setIsUserNotFound(false));\n        }\n\n        dispatch(setDialogs(resp));\n        dispatch(setIsLoading(false));\n      });\n    });\n    dispatch(setRecipient(recipient));\n  };\n};\nexport const setRecipientThunk = (name, id, userId) => {\n  return dispatch => {\n    dispatch(setIsDialogActive(true));\n    api.getChatMessages(id, userId).then(data => {\n      dispatch(setMessages(data));\n    });\n    dispatch(setRecipient(name));\n  };\n};\nexport const setRecipient = recipient => ({\n  type: SET_RECIPIENT,\n  recipient\n});\nexport const updateMessages = message => ({\n  type: UPDATE_MESSAGES,\n  message\n});\nexport const setMessages = messages => ({\n  type: SET_MESSAGES,\n  messages\n});\nexport const setDialogs = dialogs => ({\n  type: SET_DIALOGS,\n  dialogs\n});\nexport const setIsConnected = isConnected => ({\n  type: SET_IS_CONNECTED,\n  isConnected\n});\nexport const setIsDialogActive = isDialogActive => ({\n  type: SET_IS_DIALOG_ACTIVE,\n  isDialogActive\n});\nexport const setIsUserNotFound = isUserNotFound => ({\n  type: SET_IS_USER_NOT_FOUND,\n  isUserNotFound\n});\nexport const setIsLoading = isLoading => ({\n  type: SET_IS_LOADING,\n  isLoading\n});\nexport default messagesReducer;","map":{"version":3,"sources":["/Users/dimitry/Desktop/dev/saturnClient/src/redux/reducers/messagesReducer.js"],"names":["api","setCurrentUser","SET_RECIPIENT","UPDATE_MESSAGES","SET_DIALOGS","SET_IS_CONNECTED","SET_MESSAGES","SET_IS_DIALOG_ACTIVE","SET_IS_USER_NOT_FOUND","SET_IS_LOADING","initialState","dialogs","recipient","messages","stomp","isConnected","isDialogActive","isUserNotFound","isLoading","messagesReducer","state","action","type","message","messagesInitialThunk","userId","login","dispatch","undefined","setIsDialogActive","setMessages","getProfile","then","data1","email","id","getAllUsers","data2","resp","content","filter","el","getChatMessages","data3","map","setIsUserNotFound","setDialogs","setIsLoading","setRecipient","setRecipientThunk","name","data","updateMessages","setIsConnected"],"mappings":"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","sourcesContent":["import api from \"../../api/api\";\nimport {setCurrentUser} from \"./authReducer\";\n\nconst SET_RECIPIENT = \"SET_RECIPIENT\"\nconst UPDATE_MESSAGES = \"UPDATE_MESSAGES\"\nconst SET_DIALOGS = \"SET_DIALOGS\"\nconst SET_IS_CONNECTED = \"SET_IS_CONNECTED\"\nconst SET_MESSAGES = \"SET_MESSAGES\"\nconst SET_IS_DIALOG_ACTIVE = \"SET_IS_DIALOG_ACTIVE\"\nconst SET_IS_USER_NOT_FOUND = \"SET_IS_USER_NOT_FOUND\"\nconst SET_IS_LOADING = \"SET_IS_LOADING\"\n\n\n\nlet initialState = {\n    dialogs: [],\n    recipient: '',\n    messages: [],\n    stomp: '',\n    isConnected: false,\n    isDialogActive: false,\n    isUserNotFound: true,\n    isLoading: true\n}\n\nconst messagesReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_RECIPIENT:\n            return {\n                ...state, recipient: action.recipient\n            }\n        case SET_DIALOGS:\n            return {\n                ...state, dialogs: action.dialogs\n            }\n        case UPDATE_MESSAGES:\n            return {\n                ...state,\n                messages: [...state.messages, action.message]\n            }\n        case SET_MESSAGES:\n            return {\n                ...state,\n                messages: [...action.messages]\n            }\n        case SET_IS_CONNECTED:\n            return {\n                ...state, isConnected: action.isConnected\n            }\n        case SET_IS_DIALOG_ACTIVE:\n            return {\n                ...state, isDialogActive: action.isDialogActive\n            }\n        case SET_IS_USER_NOT_FOUND:\n            return {\n                ...state, isUserNotFound: action.isUserNotFound\n            }\n        case SET_IS_LOADING:\n            return {\n                ...state, isLoading: action.isLoading\n            }\n        default:\n            return state\n    }\n}\n\n\nexport const messagesInitialThunk = (recipient, userId, login) => {\n    return (dispatch) => {\n        if (recipient === undefined) {\n            dispatch(setIsDialogActive(false))\n            dispatch(setMessages([]))\n        } else {\n            dispatch(setIsDialogActive(true))\n        }\n        api.getProfile()\n            .then(data1 => {\n                dispatch(setCurrentUser(data1.login, data1.email, data1.id))\n                api.getAllUsers()\n                    .then(data2 => {\n                        let resp = data2.content.filter(el => {\n                            if (el.login === recipient) {\n                                let id = el.id\n                                api.getChatMessages(id, userId)\n                                    .then(data3 => {\n                                        dispatch(setMessages(data3))\n                                    })\n                            }\n                            return el.login !== login\n                        })\n                        if (recipient !== undefined) {\n                            resp.map(el => {\n                                if (recipient === el.login && recipient !== login) {\n                                    dispatch(setIsUserNotFound(false))\n                                }\n                            })\n                        } else {\n                            dispatch(setIsUserNotFound(false))\n                        }\n                        dispatch(setDialogs(resp))\n                        dispatch(setIsLoading(false))\n                    })\n            })\n        dispatch(setRecipient(recipient))\n    }\n}\n\nexport const setRecipientThunk = (name, id, userId) => {\n    return (dispatch) => {\n        dispatch(setIsDialogActive(true))\n        api.getChatMessages(id, userId)\n            .then(data => {\n                dispatch(setMessages(data))\n            })\n        dispatch(setRecipient(name))\n    }\n}\n\nexport const setRecipient = (recipient) => ({type: SET_RECIPIENT, recipient})\nexport const updateMessages = (message) => ({type: UPDATE_MESSAGES, message})\nexport const setMessages = (messages) => ({type: SET_MESSAGES, messages})\nexport const setDialogs = (dialogs) => ({type: SET_DIALOGS, dialogs})\nexport const setIsConnected = (isConnected) => ({type: SET_IS_CONNECTED, isConnected})\nexport const setIsDialogActive = (isDialogActive) => ({type: SET_IS_DIALOG_ACTIVE, isDialogActive})\nexport const setIsUserNotFound = (isUserNotFound) => ({type: SET_IS_USER_NOT_FOUND, isUserNotFound})\nexport const setIsLoading= (isLoading) => ({type: SET_IS_LOADING, isLoading})\n\nexport default messagesReducer\n"]},"metadata":{},"sourceType":"module"}