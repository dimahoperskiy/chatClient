{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dimitry/Desktop/dev/saturnClient/src/components/content/Messages/Message/TextArea.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useRef, useEffect } from \"react\";\n\nconst TextArea = ({\n  input,\n  meta,\n  defaultValue,\n  ...props\n}) => {\n  _s();\n\n  let ref = useRef(null);\n  useEffect(() => {\n    if (ref.current && ref.current.value === defaultValue) {\n      let len = ref.current.value.length;\n      ref.current.setSelectionRange(len + 1, len + 1);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"textarea\", { ...input,\n    ...props,\n    autoFocus: true,\n    ref: ref,\n    defaultValue: defaultValue\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TextArea, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n_c = TextArea;\nexport default TextArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextArea\");","map":{"version":3,"sources":["/Users/dimitry/Desktop/dev/saturnClient/src/components/content/Messages/Message/TextArea.js"],"names":["React","useRef","useEffect","TextArea","input","meta","defaultValue","props","ref","current","value","len","length","setSelectionRange"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,SAAhB,QAAgC,OAAhC;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,IAAR;AAAcC,EAAAA,YAAd;AAA4B,KAAGC;AAA/B,CAAD,KAA2C;AAAA;;AACxD,MAAIC,GAAG,GAAGP,MAAM,CAAC,IAAD,CAAhB;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,GAAG,CAACC,OAAJ,IAAeD,GAAG,CAACC,OAAJ,CAAYC,KAAZ,KAAsBJ,YAAzC,EAAuD;AACnD,UAAIK,GAAG,GAAGH,GAAG,CAACC,OAAJ,CAAYC,KAAZ,CAAkBE,MAA5B;AACAJ,MAAAA,GAAG,CAACC,OAAJ,CAAYI,iBAAZ,CAA8BF,GAAG,GAAG,CAApC,EAAuCA,GAAG,GAAG,CAA7C;AACH;AACJ,GALQ,CAAT;AAOA,sBACI,yBAAcP,KAAd;AAAA,OAAyBG,KAAzB;AAAgC,IAAA,SAAS,MAAzC;AAA0C,IAAA,GAAG,EAAEC,GAA/C;AAAoD,IAAA,YAAY,EAAEF;AAAlE;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAdD;;GAAMH,Q;;KAAAA,Q;AAgBN,eAAeA,QAAf","sourcesContent":["import React from \"react\"\nimport {useRef, useEffect} from \"react\"\n\nconst TextArea = ({input, meta, defaultValue, ...props}) => {\n    let ref = useRef(null)\n\n\n    useEffect(() => {\n        if (ref.current && ref.current.value === defaultValue) {\n            let len = ref.current.value.length\n            ref.current.setSelectionRange(len + 1, len + 1)\n        }\n    })\n\n    return (\n        <textarea {...input} {...props} autoFocus ref={ref} defaultValue={defaultValue}/>\n    )\n}\n\nexport default TextArea"]},"metadata":{},"sourceType":"module"}