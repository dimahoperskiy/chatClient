{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dimitry/Desktop/dev/saturnClient/src/components/AppContainer.js\";\nimport React from \"react\";\nimport App from \"./App\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"stompjs\";\nimport { reset } from \"redux-form\";\nimport { setMessages, updateMessages } from \"../redux/reducers/messagesReducer\";\nimport { setCurrentUser, setIsLoadingApp } from \"../redux/reducers/authReducer\";\nimport { connect } from \"react-redux\";\nimport api from \"../api/api\";\nimport Preloader from \"./common/Preloader/Preloader\";\n\nconst mapStateToProps = state => {\n  return {\n    userId: state.auth.id,\n    recipient: state.messagesPage.recipient,\n    login: state.auth.login,\n    isLoggedIn: state.auth.isLoggedIn,\n    messages: state.messagesPage.messages,\n    isLoadingApp: state.auth.isLoadingApp\n  };\n};\n\nconst mapDispatchToProps = {\n  updateMessages,\n  setMessages,\n  setCurrentUser,\n  setIsLoadingApp\n};\n\nclass AppContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.connect = () => {\n      let sock = new SockJS(\"http://localhost:8092/ws\");\n      this.stompClient = Stomp.over(sock);\n      this.stompClient.debug = null;\n      this.stompClient.connect({}, this.onConnected, this.onError);\n    };\n\n    this.onConnected = () => {\n      this.stompClient.subscribe(\"/user/\" + this.props.userId + \"/queue/messages\", this.onNotificationReceived);\n    };\n\n    this.onError = err => {\n      console.log(err);\n    };\n\n    this.onNotificationReceived = msg => {\n      // получили уведомление\n      const notification = JSON.parse(msg.body);\n\n      if (notification.deleted) {\n        // об удалении\n        let newMessages = this.props.messages.filter(el => el.id !== notification.id);\n        this.props.setMessages(newMessages);\n      } else if (notification.updated) {\n        // об обновлении\n        api.getMessage(notification.id).then(message => {\n          let content = message.content;\n          let newMessages = this.props.messages.map(el => {\n            if (el.id === notification.id) el.content = content;\n            return el;\n          });\n          this.props.setMessages(newMessages);\n        });\n      } else {\n        // о новом сообщении\n        api.getMessage(notification.id).then(message => {\n          if (message.senderName === this.props.recipient || message.senderName === this.props.login) {\n            this.props.updateMessages(message);\n          }\n        });\n      }\n    };\n\n    this.sendMessage = (formData, dispatch) => {\n      api.getUser(this.props.recipient).then(data => {\n        let msg = formData.text;\n\n        if (msg.trim() !== \"\") {\n          const message = {\n            senderId: this.props.userId,\n            recipientId: data.id,\n            senderName: this.props.login,\n            recipientName: this.props.recipient,\n            content: msg,\n            timestamp: new Date()\n          };\n          this.stompClient.send(\"/app/chat\", {}, JSON.stringify(message));\n        }\n      });\n      dispatch(reset(\"messages\"));\n    };\n\n    this.deleteMessage = (id, recipient) => {\n      this.stompClient.send(\"/app/chat/delete\", {}, JSON.stringify({\n        id,\n        recipient\n      }));\n      let newMessages = this.props.messages.filter(el => el.id !== id);\n      this.props.setMessages(newMessages);\n    };\n\n    this.editMessage = (id, recipient, content) => {\n      this.stompClient.send(\"/app/chat/edit\", {}, JSON.stringify({\n        id,\n        recipient,\n        content\n      }));\n      let newMessages = this.props.messages.map(el => {\n        if (el.id === id) el.content = content;\n        return el;\n      });\n      this.props.setMessages(newMessages);\n    };\n  }\n\n  componentDidMount() {\n    api.getProfile().then(data => {\n      this.props.setCurrentUser(data.login, data.email, data.id);\n      this.props.setIsLoadingApp(false);\n    }).catch(() => {\n      this.props.setIsLoadingApp(false);\n    });\n\n    if (!this.stompClient && this.props.userId !== -1 && this.props.userId !== undefined) {\n      this.connect();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (!this.stompClient && this.props.userId !== -1 && this.props.userId !== undefined) {\n      this.connect();\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return this.props.recipient === nextProps.recipient;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.props.isLoadingApp ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 44\n      }, this) : /*#__PURE__*/_jsxDEV(App, {\n        sendMessage: this.sendMessage,\n        deleteMessage: this.deleteMessage,\n        editMessage: this.editMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppContainer); // export const stompClient = AppContainer.stompClient","map":{"version":3,"sources":["/Users/dimitry/Desktop/dev/saturnClient/src/components/AppContainer.js"],"names":["React","App","SockJS","Stomp","reset","setMessages","updateMessages","setCurrentUser","setIsLoadingApp","connect","api","Preloader","mapStateToProps","state","userId","auth","id","recipient","messagesPage","login","isLoggedIn","messages","isLoadingApp","mapDispatchToProps","AppContainer","Component","sock","stompClient","over","debug","onConnected","onError","subscribe","props","onNotificationReceived","err","console","log","msg","notification","JSON","parse","body","deleted","newMessages","filter","el","updated","getMessage","then","message","content","map","senderName","sendMessage","formData","dispatch","getUser","data","text","trim","senderId","recipientId","recipientName","timestamp","Date","send","stringify","deleteMessage","editMessage","componentDidMount","getProfile","email","catch","undefined","componentDidUpdate","prevProps","prevState","snapshot","shouldComponentUpdate","nextProps","nextState","nextContext","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport App from \"./App\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"stompjs\";\nimport {reset} from \"redux-form\";\nimport {setMessages, updateMessages} from \"../redux/reducers/messagesReducer\";\nimport {setCurrentUser, setIsLoadingApp} from \"../redux/reducers/authReducer\";\nimport {connect} from \"react-redux\";\nimport api from \"../api/api\";\nimport Preloader from \"./common/Preloader/Preloader\";\n\nconst mapStateToProps = (state) => {\n    return ({\n        userId: state.auth.id,\n        recipient: state.messagesPage.recipient,\n        login: state.auth.login,\n        isLoggedIn: state.auth.isLoggedIn,\n        messages: state.messagesPage.messages,\n        isLoadingApp: state.auth.isLoadingApp\n    })\n}\n\nconst mapDispatchToProps = {\n    updateMessages,\n    setMessages,\n    setCurrentUser,\n    setIsLoadingApp\n}\n\n\nclass AppContainer extends React.Component {\n    componentDidMount() {\n        api.getProfile()\n            .then(data => {\n                this.props.setCurrentUser(data.login, data.email, data.id)\n                this.props.setIsLoadingApp(false)\n            })\n            .catch(() => {\n                this.props.setIsLoadingApp(false)\n            })\n        if (!this.stompClient && this.props.userId !== -1 && this.props.userId !== undefined) {\n            this.connect()\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (!this.stompClient && this.props.userId !== -1 && this.props.userId !== undefined) {\n            this.connect()\n        }\n    }\n\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return this.props.recipient === nextProps.recipient;\n    }\n\n    connect = () => {\n        let sock = new SockJS(\"http://localhost:8092/ws\");\n        this.stompClient = Stomp.over(sock)\n        this.stompClient.debug = null\n        this.stompClient.connect({}, this.onConnected, this.onError);\n    };\n\n\n    onConnected = () => {\n        this.stompClient.subscribe(\n            \"/user/\" + this.props.userId + \"/queue/messages\",\n            this.onNotificationReceived\n        );\n    };\n\n    onError = (err) => {\n        console.log(err);\n    };\n\n    onNotificationReceived = (msg) => {\n        // получили уведомление\n        const notification = JSON.parse(msg.body);\n        if (notification.deleted) { // об удалении\n            let newMessages = this.props.messages.filter(el => el.id !== notification.id)\n            this.props.setMessages(newMessages)\n        } else if (notification.updated) { // об обновлении\n            api.getMessage(notification.id)\n                .then((message) => {\n                    let content = message.content\n                    let newMessages = this.props.messages.map(el => {\n                        if (el.id === notification.id) el.content = content\n                        return el\n                    })\n                    this.props.setMessages(newMessages);\n                })\n        } else { // о новом сообщении\n            api.getMessage(notification.id)\n                .then((message) => {\n                    if (message.senderName === this.props.recipient || message.senderName === this.props.login) {\n                        this.props.updateMessages(message);\n                    }\n                })\n        }\n    };\n\n    sendMessage = (formData, dispatch) => {\n        api.getUser(this.props.recipient)\n            .then(data => {\n                let msg = formData.text\n                if (msg.trim() !== \"\") {\n                    const message = {\n                        senderId: this.props.userId,\n                        recipientId: data.id,\n                        senderName: this.props.login,\n                        recipientName: this.props.recipient,\n                        content: msg,\n                        timestamp: new Date(),\n                    }\n                    this.stompClient.send(\"/app/chat\", {}, JSON.stringify(message));\n\n                }\n            })\n        dispatch(reset(\"messages\"))\n    }\n\n    deleteMessage = (id, recipient) => {\n        this.stompClient.send(\"/app/chat/delete\", {}, JSON.stringify({\n            id,\n            recipient\n        }))\n        let newMessages = this.props.messages.filter(el => el.id !== id)\n        this.props.setMessages(newMessages)\n    }\n\n    editMessage = (id, recipient, content) => {\n        this.stompClient.send(\"/app/chat/edit\", {}, JSON.stringify({\n            id,\n            recipient,\n            content\n        }))\n        let newMessages = this.props.messages.map(el => {\n            if (el.id === id) el.content = content\n            return el\n        })\n        this.props.setMessages(newMessages);\n\n    }\n\n    render() {\n        return (\n            <>\n                {this.props.isLoadingApp ? <Preloader/> :\n                    <App sendMessage={this.sendMessage}\n                         deleteMessage={this.deleteMessage}\n                         editMessage={this.editMessage}/>\n                }\n            </>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppContainer)\n\n// export const stompClient = AppContainer.stompClient"]},"metadata":{},"sourceType":"module"}